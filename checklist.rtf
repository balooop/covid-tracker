{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21620\viewh4940\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Demo
\fs26 \

\fs28 \
Overview\

\f1\b0\fs24 Our app collects and displays crowdsourced Covid data. \
There are two primary functions of our application: \
	1) Tracking \'93COVID Hotspots\'94 by allowing users who have tested positive to enter locations they have been\
	2) Tracking businesses who may be violating COVID safety guidelines by allowing users to report businesses for violating guidelines 
\f0\b\fs28 \
\
Basic Functions
\f1\b0\fs26 \

\f0\b\fs24 	1. Show real data (25 records):
\f1\b0 \
		- go to \'93Hotspots\'94 page\
		- search for 2 known addresses - 512 E Green St., 202 E Green St.\
		- show Hotspots bubble chart:\
			shows # of cases and business reports at each \'93Block\'94 \
			shows # of cases at each address in the block\
	
\f0\b 2. CRUD SQL\
		Create: 
\f1\b0 \
			- click Yes on recently tested positive\
			- enter a couple addresses (310 E Springfield Ave, 50 E Daniel St, 212 E Green St.)\
			- uses Google Places API to get \'93proper\'94 addresses and ensure consistency of data\
			- explain how it works on a trigger to update Cases table and cascades to Addresses and Blocks to keep track of cases at an address and its block\
				- compute BlockID (mysql/submit/processForm.py)\
				- show trigger (mysql/intert_cases_trigger.sql)\
			- error if \'93invalid\'94 address\
		
\f0\b Read
\f1\b0 :\
			- search for Address in search box (e.x. 310 E Springfield Ave)\
			- show that it displays # cases at the location (SQL portion)\
		
\f0\b Update: 
\f1\b0 \
			- add a new case at an address (310 E Springfield Ave)\
			- trigger determines if there needs to be a new address entry added or we simply update count of cases\
			- search for 310 E Springfield Ave in search box and show an updated # cases\
		
\f0\b Delete
\f1\b0 :\
			- not tested positive \'97> cleared from isolation\
			- deletes based on a trigger (mysql/delete_cases_trigger.sql) \'97> finds all cases associated with that address and removes case from address and block\

\f0\b 	3. Interesting Queries\
		
\f1\b0 - go to leaderboard page\
		query 1: \'93super spreaders\'94 people who have been to the most locations and tested positive\
		query 2: bad businesses - businesses with the most cases at those businesses\

\f0\b 	4. Advanced Function 1:
\f1\b0  Bubble chart of cases\
		1. Useful: Shows peoples blocks to avoid by showing them areas with lots of cases\
		2. DB stored procedures, functions, triggers:\
			Trigger used for insert/update and delete as explained earlier to calculate # cases at a block and address\
		3. Technical complexity:\
			Complexity of parsing data correctly to display in chart - needed to parse data into a dictionary \'97> key = block, value = (address, cases) pair \'97> passed to create a chart\
		4. Creative or novel: haven\'92t seen anything that shows hotspots by block on campus	
\f0\b 5. Advanced Function 2:
\f1\b0  NoSQL to hold violations\
		1. Implementation Overview:\
			- addresses to report: Noodles & Company, Bearology, County Market \
			- choose address, report violation, type \'93workers not wearing masks, seemed very unsanitary and crowded\'94 \'97> search for address, see updated # violations + text showing their complaint\
			- how it works: user enters the address and violation, we parse it to find keywords related to violation categories (social distancing, etc.), tally # violations and store complaints in an array\
		2. Why NoSQL: \
			- wanted to have free text list of complaints that could be added to, MongoDB allows for holding data in arrays \
			- SQL was fine for cases b/c there\'92s no reason to hold data in arrays or freeform, but violations required storing user complaints\
		3. Challenges in connecting SQL and NoSQL\
			- bubble chart\
			- had to get data from both SQL and NoSQL to update bubble chart\
			- issue: not able to show locations with violations but no cases \'97> had to workaround by looking through both SQL and NoSQL and adding entries to dictionary from Mongo\
		4. Useful: people can check if a restaurant or business they want to visit hasn\'92t been following guidelines\
		5. Challenging: using MongoDB figuring out how to parse complaints to do sentiment analysis, integrating with MySQL in bubble chart\
		6. Creative: haven\'92t seen tis before\

\fs20 \

\fs24 				}